---
export const prerender = false;
import { Product } from "astro:db";
import { getRelativeLocaleUrl } from "astro:i18n";

import Basehead from "../../components/shared/basehead.astro";
import Navbar from "../../components/shared/navbar.astro";
import AccentBanner from "../../components/shared/accentBanner.astro";
import ProductGrid from "../../components/shop/product_grid.vue";
import Footer from "../../components/shared/footer.astro";

import { getLangFromUrl, useTranslations } from "../../i18n/utils";
import {
	type sortKeyMapping,
	type queryProductsOptions,
	type partialSelectFields,
	DEFAULT_PAGE_SIZE,
	retrieveCategories,
	queryProducts,
	getProductSortKey,
	countAllMatchingRows,
} from "../../scripts/databaseUtils";

const location = "Shop";
const lang = getLangFromUrl(Astro.url);
const translate = useTranslations(lang);

async function parseFormData() {
	if (Astro.request.method !== "POST") {
		return {
			method: "GET",
			order: "category_asc",
			filters: [""],
		};
	}

	const formData = await Astro.request.formData();
	return {
		method: "POST",
		order: formData.get("order"),
		filters: formData.getAll("filter"),
	};
}
const formData = await parseFormData();

const sortKeyMapping = {
	name_asc: {
		sortKey: getProductSortKey("name", "asc"),
		label: translate("shop.filterForm.nameAsc"),
	},
	name_desc: {
		sortKey: getProductSortKey("name", "desc"),
		label: translate("shop.filterForm.nameDesc"),
	},
	category_asc: {
		sortKey: getProductSortKey("category", "asc"),
		label: translate("shop.filterForm.categoryAsc"),
	},
	category_desc: {
		sortKey: getProductSortKey("category", "desc"),
		label: translate("shop.filterForm.categoryDesc"),
	},
	price_asc: {
		sortKey: getProductSortKey("price", "asc"),
		label: translate("shop.filterForm.priceAsc"),
	},
	price_desc: {
		sortKey: getProductSortKey("price", "desc"),
		label: translate("shop.filterForm.priceDesc"),
	},
} satisfies sortKeyMapping;

const queryOptions = {
	sortKeyMapping: sortKeyMapping,
	order: formData.order,
	filters: formData.filters,
} satisfies queryProductsOptions;

const selectedColumns = {
	name: Product.name,
	category: Product.category,
	price: Product.price,
	media: Product.media,
} satisfies partialSelectFields;

const { slug } = Astro.params;
if (slug === undefined) {
	throw new Error("Shop pagination [slug] is undefined");
}
const redirect404 = () => Astro.redirect(getRelativeLocaleUrl(lang, "404"));

const pageSize = DEFAULT_PAGE_SIZE;
const pageNumber = Number(slug);

if (Number.isNaN(pageNumber) || pageNumber <= 0) { redirect404(); }

const numberOfPages = Math.ceil((await countAllMatchingRows()) / pageSize);
if (pageNumber > numberOfPages) { redirect404(); }

const categories = await retrieveCategories();
const products = await queryProducts(
	queryOptions,
	selectedColumns,
	pageNumber,
	pageSize,
);

const productPage = {
	formMethod: Astro.request.method,
	catalogue: {
		categories: categories,
		products: products
	},

	firstPage: "1",
	previousPage: pageNumber === 1 ? undefined : `${pageNumber - 1}`,
	currentPage: pageNumber.toString(),
	nextPage:
		pageNumber === numberOfPages || products.length < pageSize
			? undefined
			: `${pageNumber + 1}`,
	lastPage: numberOfPages.toString(),
};
---

<html lang={lang}>
	<head>
		<Basehead title={`QuynhBio - ${translate("nav.shop")}`} />
		<meta name="generator" content={Astro.generator} />
	</head>

	<body
		class="bg-orange-100 text-stone-800 dark:bg-stone-800 dark:text-orange-100"
	>
		<div class="w-full h-svh">
			<Navbar location={location} />

			<AccentBanner
				title={translate("shop.banner.title")}
				subtitle={translate("shop.banner.subtitle")}
			/>

			<ProductGrid
				client:load
				lang={lang}
				formData={formData}
				sortKeyMapping={sortKeyMapping}
				productPage={productPage}
			/>

			<Footer />
		</div>
	</body>
</html>
